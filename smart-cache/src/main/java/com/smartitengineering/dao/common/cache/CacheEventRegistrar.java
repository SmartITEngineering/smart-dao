/*
 * This is a common dao with basic CRUD operations and is not limited to any 
 * persistent layer implementation
 * 
 * Copyright (C) 2008  Imran M Yousuf (imyousuf@smartitengineering.com)
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */
package com.smartitengineering.dao.common.cache;

import com.smartitengineering.domain.PersistentDTO;

/**
 * Event registrar for notifying domains appropriately of different persistence
 * events generated by different DAOs'
 * @author imyousuf
 */
public interface CacheEventRegistrar {

    /**
     * Register event listeners for certain class and change type. If type is
     * not mentioned it will mean for all.
     * @param observe The class type to observe. It can not be NULL.
     * @param type The change type to observe.
     * @param listeners Listeners to register, can not be NULL or empty
     * @throws java.lang.IllegalArgumentException If observe is NULL and/or
     *                                            listeners is NULL or EMPTY
     */
    public void addCacheEventListeners(Class<? extends PersistentDTO> observe,
                                       ChangeEvent.ChangeType type,
                                       ChangeListener... listeners)
        throws IllegalArgumentException;

    /**
     * Remove the listeners from all registers.
     * @param listeners Listeners to be removed from observation
     */
    public void removeListeners(ChangeListener... listeners);

    /**
     * Fire the event to appropriate observers.
     * @param event Event to trigger
     */
    public void fireEvent(ChangeEvent event);
}
